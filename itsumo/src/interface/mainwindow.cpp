/****************************************************************************
** Form implementation generated from reading ui file 'mainwindow.ui'
**
** Created: Wed Oct 12 20:19:05 2011
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "mainwindow.h"

#include <qvariant.h>
#include <qpushbutton.h>
#include <qtabwidget.h>
#include <qwidget.h>
#include <qgroupbox.h>
#include <qtable.h>
#include <qcombobox.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <qheader.h>
#include <qlistview.h>
#include <qtextedit.h>
#include <qlistbox.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qaction.h>
#include <qmenubar.h>
#include <qpopupmenu.h>
#include <qtoolbar.h>
#include <qimage.h>
#include <qpixmap.h>

#include "mainwindow.ui.h"
static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x03,
    0xf1, 0x49, 0x44, 0x41, 0x54, 0x58, 0x85, 0xbd, 0x97, 0xc1, 0x8e, 0xe3,
    0x44, 0x10, 0x86, 0x3f, 0xb7, 0xdb, 0x76, 0x26, 0x99, 0x11, 0xa3, 0x65,
    0x0f, 0x70, 0x60, 0xb4, 0x12, 0x5c, 0xf6, 0xc8, 0x89, 0x1b, 0x57, 0x2e,
    0xdc, 0x39, 0x21, 0xf1, 0x16, 0x7b, 0x9c, 0xcd, 0xc3, 0x20, 0x24, 0xb8,
    0xf1, 0x10, 0x9c, 0x38, 0xf2, 0x0a, 0x2c, 0x2c, 0xa3, 0x19, 0xc8, 0x4c,
    0x62, 0xc7, 0x76, 0x77, 0x35, 0x87, 0x6a, 0x27, 0x76, 0x12, 0x27, 0x83,
    0x14, 0x51, 0x52, 0x4f, 0x7b, 0x1c, 0x77, 0xd7, 0xdf, 0x55, 0x7f, 0x55,
    0x57, 0x25, 0x40, 0x0a, 0x58, 0x20, 0x03, 0xf2, 0x38, 0xa7, 0x71, 0x24,
    0x9c, 0x4f, 0x02, 0xe0, 0xe3, 0x68, 0x81, 0x06, 0x68, 0x6d, 0x54, 0x5e,
    0x00, 0x53, 0xe0, 0x32, 0xce, 0x45, 0x0f, 0xc8, 0xb9, 0xa4, 0x53, 0x5c,
    0x03, 0x25, 0xb0, 0x04, 0xca, 0xee, 0xe4, 0x53, 0xe0, 0x8f, 0x33, 0x2a,
    0x3b, 0x25, 0x5f, 0x02, 0x77, 0xa0, 0xa7, 0xcf, 0xd1, 0x93, 0xf3, 0xc3,
    0x2f, 0xe0, 0x3d, 0x78, 0x07, 0x6d, 0x0b, 0xae, 0x05, 0xf1, 0x20, 0x02,
    0x21, 0x1c, 0xde, 0xc9, 0xa4, 0x90, 0xc6, 0x61, 0x73, 0xb0, 0x16, 0x52,
    0x0b, 0xc6, 0x40, 0x72, 0xc0, 0x81, 0xdf, 0x7c, 0x01, 0xc0, 0x4d, 0xfc,
    0xd7, 0xf5, 0x2d, 0x80, 0x73, 0xd0, 0x36, 0xb0, 0xae, 0xa0, 0x5a, 0x41,
    0xbd, 0x86, 0xb6, 0xd6, 0xf7, 0x22, 0xa8, 0x17, 0x7b, 0x92, 0x18, 0x55,
    0x96, 0xe7, 0x90, 0x17, 0x70, 0x31, 0x83, 0xe2, 0x42, 0x9f, 0xb3, 0x5c,
    0x41, 0x8c, 0xc8, 0xc7, 0xc0, 0x23, 0xb0, 0xb0, 0xa8, 0x9f, 0x0b, 0xd0,
    0x13, 0xaf, 0x4b, 0xf8, 0xed, 0x57, 0xf8, 0xeb, 0xdd, 0x49, 0x33, 0xee,
    0xc9, 0xcb, 0x8f, 0xe0, 0xf5, 0xe7, 0x5b, 0x70, 0x99, 0x65, 0x8c, 0xc6,
    0x2f, 0x50, 0xab, 0x17, 0x1d, 0x80, 0x0c, 0xa0, 0x69, 0xa0, 0x5c, 0xc1,
    0xfb, 0xdf, 0xe1, 0xf6, 0xf6, 0xf6, 0x3f, 0x03, 0x98, 0xcf, 0xe7, 0x7c,
    0xf2, 0x69, 0x74, 0x87, 0xd5, 0x79, 0x24, 0x8c, 0x2e, 0x81, 0x09, 0x3d,
    0x8c, 0x29, 0x80, 0x6b, 0x60, 0xbd, 0x42, 0x4d, 0x1d, 0xcd, 0x1d, 0x82,
    0xfe, 0x91, 0x10, 0x10, 0x09, 0x84, 0x00, 0x21, 0x84, 0xcd, 0xfb, 0xbe,
    0xf8, 0x16, 0x1e, 0x1f, 0xc0, 0x46, 0x4e, 0x90, 0xe8, 0x73, 0x62, 0x22,
    0x90, 0x2d, 0x9a, 0x4d, 0x94, 0xd9, 0xfe, 0x06, 0xce, 0x41, 0x5d, 0x6f,
    0xf5, 0x87, 0x00, 0x22, 0x01, 0xef, 0x05, 0xd7, 0x7a, 0x9a, 0xc6, 0xd1,
    0xb6, 0x82, 0x77, 0x82, 0x88, 0xec, 0x81, 0xa8, 0x2a, 0xb8, 0xbf, 0x53,
    0x45, 0x01, 0xe5, 0x4d, 0x5e, 0xa8, 0x16, 0x6b, 0x15, 0xc8, 0xae, 0x0c,
    0x00, 0x88, 0x53, 0x1e, 0x6c, 0x10, 0x48, 0xc0, 0x3b, 0xa1, 0x5e, 0x3b,
    0xaa, 0xaa, 0x61, 0xf5, 0x54, 0x53, 0x55, 0x0d, 0xf5, 0xda, 0xe1, 0x9c,
    0xe0, 0x45, 0x06, 0xc4, 0x5c, 0x3d, 0xc2, 0xfd, 0x7b, 0x40, 0x20, 0x88,
    0x5a, 0x64, 0x7a, 0xa9, 0xc4, 0x2c, 0x26, 0x60, 0xb3, 0x13, 0x00, 0xbc,
    0x68, 0x18, 0xaa, 0x99, 0xc1, 0x4b, 0xa0, 0x6d, 0x3c, 0x65, 0xd9, 0xf0,
    0xe7, 0xbb, 0x05, 0x4d, 0xed, 0x06, 0x8b, 0xd3, 0x1d, 0x9a, 0x27, 0x89,
    0xae, 0x73, 0x5e, 0x23, 0x29, 0x31, 0x6a, 0x95, 0xeb, 0x0f, 0xbb, 0x0f,
    0x4e, 0x00, 0x08, 0x11, 0xf9, 0x06, 0x80, 0x0f, 0xd4, 0xb5, 0x63, 0xf9,
    0x54, 0x53, 0xd7, 0x8e, 0xaf, 0xbf, 0xfa, 0x6e, 0x7f, 0x87, 0x9e, 0xcc,
    0x26, 0xaf, 0xb8, 0xfa, 0x00, 0x66, 0x57, 0x1a, 0x92, 0x79, 0x01, 0x3f,
    0xfe, 0x3c, 0x67, 0xb9, 0x80, 0xd4, 0x44, 0x5e, 0x1c, 0x03, 0x20, 0x3d,
    0xe5, 0xea, 0x7f, 0x68, 0x1b, 0xa1, 0x5c, 0x35, 0x10, 0xf6, 0xd2, 0xc0,
    0xbe, 0x84, 0xe1, 0xfa, 0x10, 0xf4, 0x40, 0xe5, 0x52, 0x5d, 0x90, 0x4d,
    0x4e, 0x59, 0x20, 0x2e, 0xe8, 0x38, 0x10, 0x24, 0xe0, 0x9c, 0xd0, 0xac,
    0xdd, 0x20, 0x32, 0x4e, 0xe2, 0xe8, 0xd6, 0xc7, 0x51, 0x57, 0x9a, 0xd0,
    0x7c, 0xbb, 0xff, 0xed, 0xc0, 0x89, 0x41, 0xf6, 0xd1, 0x8b, 0x17, 0xda,
    0x56, 0x46, 0x53, 0xf1, 0xde, 0x01, 0x76, 0x94, 0x8b, 0x68, 0x7e, 0x69,
    0x9d, 0xf2, 0xeb, 0x38, 0x80, 0xde, 0x1c, 0x00, 0x21, 0x20, 0x02, 0x5e,
    0x64, 0x1b, 0x9a, 0x47, 0x46, 0x7f, 0x9f, 0xd0, 0xfb, 0xc1, 0xbb, 0x78,
    0xa7, 0x1c, 0x00, 0x60, 0x77, 0x5f, 0x24, 0x66, 0x87, 0x07, 0x31, 0xe9,
    0x84, 0x3e, 0xc2, 0x31, 0x0b, 0xa0, 0x91, 0xd0, 0x91, 0x5d, 0xd7, 0xab,
    0x15, 0xba, 0x71, 0xd4, 0x02, 0x26, 0xd1, 0x84, 0x71, 0xf2, 0x88, 0x47,
    0x10, 0x0c, 0x6e, 0xc1, 0x1e, 0xa7, 0xc2, 0xc8, 0x8d, 0x3a, 0xb0, 0x40,
    0x62, 0x34, 0x59, 0x0c, 0x78, 0xc0, 0xd0, 0xaf, 0xa7, 0xc4, 0xa4, 0xdb,
    0x8c, 0xb7, 0xc9, 0xa6, 0x61, 0xdc, 0x02, 0x03, 0x00, 0xc6, 0x40, 0x3e,
    0x81, 0xeb, 0x97, 0xf0, 0xf6, 0xed, 0x1c, 0xef, 0xf5, 0x4a, 0x2e, 0x97,
    0x6a, 0x9d, 0xcb, 0x8b, 0x57, 0x47, 0x95, 0x17, 0x13, 0xb5, 0xa0, 0x31,
    0x68, 0x3a, 0x8e, 0x8a, 0x37, 0xe4, 0x7e, 0x16, 0x80, 0x1c, 0x3e, 0x7b,
    0x0d, 0xe5, 0x0d, 0x2c, 0x17, 0xb0, 0x78, 0x80, 0xbf, 0xef, 0xf5, 0x38,
    0xb3, 0xab, 0xe1, 0xe2, 0x24, 0xd1, 0xd1, 0x15, 0x25, 0x36, 0xd3, 0x61,
    0xba, 0x5b, 0x70, 0xe7, 0x52, 0x3b, 0xe9, 0x02, 0x13, 0x5d, 0x30, 0x99,
    0x6e, 0x37, 0xed, 0x48, 0x29, 0x02, 0xd3, 0xd9, 0xce, 0xea, 0x64, 0x1f,
    0x44, 0x9a, 0x0e, 0x79, 0x10, 0xfa, 0xbc, 0x38, 0x05, 0x20, 0xa0, 0x1b,
    0xd9, 0x08, 0x26, 0x49, 0x63, 0x29, 0xeb, 0x35, 0x91, 0x14, 0x17, 0x07,
    0x00, 0xec, 0x02, 0x89, 0xca, 0xba, 0xa8, 0x91, 0x00, 0x26, 0xde, 0x84,
    0x87, 0x28, 0xb4, 0x1f, 0x86, 0x49, 0xac, 0xe9, 0xd2, 0xb8, 0xd1, 0x4c,
    0xe3, 0x78, 0xf5, 0xa4, 0x65, 0xd6, 0x41, 0x49, 0x06, 0xd3, 0xe6, 0xa1,
    0x03, 0x91, 0xe7, 0xd1, 0x9a, 0xcf, 0xb9, 0x8c, 0x06, 0xfb, 0x76, 0x2e,
    0xb9, 0xd0, 0x52, 0xed, 0xfb, 0x9f, 0xe6, 0x23, 0x08, 0xc6, 0x45, 0x44,
    0xaf, 0xe4, 0x2c, 0x7b, 0x06, 0x00, 0xd9, 0xb1, 0x51, 0xe8, 0x40, 0xe4,
    0x70, 0x75, 0xad, 0x85, 0xea, 0xba, 0x82, 0xa6, 0x8e, 0x15, 0xf3, 0x01,
    0x56, 0xc3, 0x96, 0x90, 0x59, 0x2c, 0x54, 0x27, 0x53, 0x48, 0xb3, 0xf1,
    0x82, 0xa4, 0xeb, 0x58, 0x0e, 0x86, 0x89, 0xe9, 0x8a, 0xcb, 0x49, 0x8c,
    0x92, 0x42, 0x95, 0xf7, 0xeb, 0x86, 0xbe, 0x74, 0x3c, 0x30, 0xb1, 0x2e,
    0xcc, 0x72, 0x05, 0x92, 0xda, 0x41, 0x39, 0x50, 0xa3, 0x4d, 0x8a, 0xb7,
    0x6c, 0x3b, 0x96, 0xf1, 0xda, 0xdf, 0x42, 0xd6, 0x95, 0xe0, 0xc5, 0x30,
    0xb6, 0x0f, 0x4a, 0xa2, 0x79, 0x23, 0x31, 0xdb, 0xe8, 0x30, 0xc3, 0x46,
    0x6f, 0x09, 0xac, 0x89, 0xad, 0x99, 0x8f, 0x88, 0x78, 0xf3, 0xed, 0xc8,
    0x86, 0xe7, 0x97, 0x87, 0x08, 0xa2, 0xb6, 0xe8, 0xe9, 0x4b, 0xb4, 0x5d,
    0xba, 0x41, 0x9b, 0x86, 0x4d, 0xdd, 0x7e, 0x46, 0xa5, 0x75, 0x54, 0xfa,
    0x80, 0xb6, 0x81, 0xff, 0x10, 0x7b, 0xc3, 0x26, 0xfe, 0x70, 0x17, 0x3f,
    0x7c, 0xa4, 0x57, 0xb7, 0x9f, 0x11, 0x40, 0x8b, 0x9a, 0x7d, 0x19, 0x95,
    0xdf, 0x01, 0xcb, 0xbe, 0x05, 0x00, 0x1c, 0xb0, 0xe0, 0x7f, 0xec, 0x8e,
    0xff, 0x05, 0xec, 0xb1, 0x2e, 0x55, 0x4a, 0xe4, 0x73, 0x3a, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0x99, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xed, 0x94, 0x41, 0x0e, 0x85,
    0x20, 0x0c, 0x44, 0x5f, 0x89, 0xc7, 0x36, 0x7f, 0x61, 0xbc, 0x77, 0x5d,
    0x28, 0x48, 0xa4, 0x28, 0x60, 0xff, 0xce, 0xd9, 0x54, 0x8b, 0xbe, 0x8e,
    0x13, 0x04, 0x3e, 0x1d, 0x92, 0x81, 0x77, 0xf4, 0x81, 0xa1, 0x23, 0xdc,
    0x2b, 0x34, 0xf6, 0xf4, 0x7a, 0x3d, 0xe2, 0xb8, 0x65, 0xa8, 0x84, 0x3f,
    0x40, 0x01, 0x98, 0x2a, 0x0b, 0x3d, 0x5f, 0x62, 0xc5, 0x83, 0x00, 0xaa,
    0x1a, 0xd7, 0x05, 0x50, 0x44, 0x9a, 0xb9, 0xd5, 0x07, 0xa7, 0x73, 0xa8,
    0xa4, 0xba, 0x4f, 0x92, 0xa2, 0xdf, 0x33, 0x3c, 0x64, 0xc6, 0x3b, 0xeb,
    0xbd, 0x82, 0xe5, 0xb8, 0xad, 0xde, 0xcb, 0xcc, 0x78, 0x20, 0xeb, 0x42,
    0x66, 0xc6, 0x39, 0x74, 0x5d, 0xfa, 0x80, 0xf3, 0x6f, 0xaf, 0x66, 0xc6,
    0x6f, 0xa1, 0x9c, 0x3f, 0x88, 0x2f, 0xb4, 0x70, 0xec, 0x05, 0xcd, 0xc0,
    0xbe, 0xd0, 0x78, 0x93, 0xf6, 0x8e, 0x17, 0x14, 0x92, 0x63, 0x5f, 0x68,
    0x6c, 0x3e, 0xef, 0xf6, 0xba, 0x3c, 0x8f, 0xdd, 0x36, 0x6d, 0xc4, 0xc0,
    0x45, 0x2c, 0x87, 0x81, 0xf8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0xa0, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xd5, 0x95, 0x4d, 0x0a, 0x80,
    0x20, 0x10, 0x85, 0x9f, 0xd1, 0x46, 0x68, 0xe1, 0x8d, 0xe6, 0x62, 0xd2,
    0x22, 0xbc, 0x98, 0x37, 0x6a, 0x21, 0xb4, 0xac, 0x45, 0x19, 0x92, 0xc6,
    0x64, 0x69, 0xe0, 0xb7, 0xf1, 0x87, 0xf1, 0xf1, 0x1c, 0x47, 0x05, 0x2a,
    0x21, 0x8e, 0x76, 0x2d, 0xad, 0xdb, 0xfb, 0x9e, 0x99, 0xf6, 0x56, 0x8f,
    0x80, 0xb5, 0x36, 0x4b, 0x85, 0x88, 0xce, 0x35, 0x44, 0x04, 0x00, 0xe8,
    0x0a, 0x39, 0x8c, 0xe8, 0xf9, 0x90, 0x34, 0xd2, 0x29, 0x2c, 0xc3, 0x7c,
    0x8e, 0xbd, 0x53, 0x0f, 0xeb, 0x58, 0x3a, 0x05, 0xe9, 0x54, 0x34, 0x1f,
    0x8a, 0x02, 0x7b, 0x2a, 0x7d, 0x3a, 0x1f, 0x09, 0xbf, 0x85, 0x4d, 0xc5,
    0xd5, 0xd9, 0x53, 0xaa, 0x39, 0x6e, 0x4f, 0x38, 0xca, 0xb1, 0x99, 0xe2,
    0xd2, 0xe1, 0x08, 0xab, 0xe1, 0x56, 0xf8, 0x2e, 0x30, 0x97, 0x7f, 0xcb,
    0x4d, 0x8f, 0xf9, 0x42, 0xd7, 0x5d, 0xbe, 0xbe, 0xd2, 0xe1, 0x43, 0x95,
    0x3a, 0x93, 0xf6, 0xca, 0xad, 0x3d, 0x61, 0x11, 0xf4, 0x4b, 0x7d, 0x4f,
    0x82, 0x0f, 0xf9, 0xc0, 0x06, 0x9b, 0xb5, 0x1e, 0xcd, 0xed, 0x31, 0x8c,
    0x5c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
    0x82
};

static const unsigned char image3_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x02,
    0x9c, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x8d, 0x95, 0xad, 0x76, 0xdb,
    0x40, 0x10, 0x85, 0x3f, 0xf7, 0x18, 0xcc, 0x32, 0x89, 0xd9, 0x50, 0xd0,
    0x61, 0x36, 0x34, 0x4c, 0x98, 0xc3, 0x62, 0x96, 0x40, 0x87, 0x25, 0x6f,
    0x50, 0x3f, 0x42, 0x61, 0x61, 0x02, 0x1b, 0xe6, 0xb2, 0x84, 0x25, 0x50,
    0x61, 0x2e, 0x8b, 0xe1, 0x42, 0x99, 0x49, 0x6c, 0x86, 0x6d, 0xc1, 0x4a,
    0xb2, 0xfc, 0x77, 0xda, 0x21, 0x92, 0x66, 0x57, 0x77, 0xee, 0xdc, 0x3b,
    0x5a, 0xf5, 0x38, 0x13, 0xaf, 0xaf, 0xaf, 0x41, 0x44, 0x48, 0xd3, 0x74,
    0x2f, 0x6f, 0x66, 0x00, 0xa8, 0x2a, 0x00, 0x55, 0x55, 0x91, 0x24, 0x09,
    0x57, 0x57, 0x57, 0xbd, 0xee, 0xbe, 0xfe, 0x39, 0x60, 0x11, 0x61, 0x32,
    0x99, 0xb4, 0x40, 0x87, 0x6b, 0x4d, 0x94, 0x65, 0x89, 0xf7, 0xfe, 0x68,
    0xcf, 0x59, 0x60, 0x80, 0xcd, 0x66, 0x73, 0x04, 0x76, 0x58, 0x48, 0x55,
    0x71, 0xce, 0xfd, 0x3f, 0xf0, 0x29, 0x00, 0x33, 0x3b, 0x2a, 0x70, 0xaa,
    0x23, 0x80, 0x6f, 0xa7, 0x92, 0x79, 0x9e, 0x07, 0x33, 0x6b, 0x99, 0x38,
    0xe7, 0x70, 0xce, 0xed, 0xe9, 0xdd, 0xe8, 0x2f, 0x22, 0x47, 0xfa, 0x9e,
    0x65, 0xac, 0xaa, 0x24, 0x49, 0x42, 0x59, 0x96, 0x88, 0x48, 0x6b, 0x54,
    0x37, 0x4e, 0xb5, 0xff, 0x4f, 0xc6, 0x10, 0x5b, 0x3c, 0x9c, 0x88, 0x2e,
    0x68, 0x53, 0xec, 0x9c, 0x14, 0x27, 0x19, 0x37, 0x6c, 0x4e, 0x31, 0xed,
    0xe6, 0x55, 0x75, 0x6f, 0x42, 0xba, 0x71, 0xa4, 0x0d, 0xc0, 0x6a, 0xb5,
    0x0a, 0x59, 0x96, 0x31, 0x1c, 0x0e, 0xcf, 0x82, 0x37, 0x46, 0x7e, 0x7e,
    0x7e, 0x02, 0x20, 0x92, 0x30, 0x9f, 0x5f, 0xb7, 0x78, 0x7b, 0x8c, 0xdf,
    0xdf, 0xdf, 0x83, 0xf7, 0x9e, 0xfc, 0x23, 0x47, 0x66, 0x82, 0x88, 0xb4,
    0x00, 0x87, 0xd7, 0x86, 0x69, 0x59, 0x94, 0xe4, 0x79, 0xce, 0xb6, 0xda,
    0xf2, 0xf0, 0xf0, 0x10, 0x66, 0xb3, 0x19, 0xd7, 0xd7, 0xd7, 0xbd, 0x5e,
    0x17, 0x74, 0xb3, 0xf1, 0x54, 0xc5, 0x16, 0x35, 0x80, 0xd3, 0x4c, 0x01,
    0x9c, 0xa4, 0x08, 0x02, 0x0e, 0x7c, 0xe1, 0x59, 0xaf, 0xff, 0xb0, 0xdd,
    0x16, 0xa8, 0x1a, 0x17, 0x17, 0x19, 0x8b, 0xc5, 0x22, 0x4a, 0xd1, 0x30,
    0xbd, 0x9c, 0x5e, 0xe2, 0xd2, 0x14, 0x55, 0x03, 0x53, 0x8e, 0x6c, 0x31,
    0x03, 0x84, 0x9c, 0x4f, 0x3e, 0x78, 0x65, 0x6a, 0x53, 0xd2, 0xaf, 0x94,
    0xe7, 0x97, 0x67, 0xfc, 0x57, 0xfc, 0xfa, 0xd4, 0x94, 0x6c, 0x74, 0x11,
    0x41, 0x9f, 0x9e, 0x7e, 0x85, 0xb2, 0x28, 0xc3, 0xff, 0xc4, 0x57, 0xf8,
    0x0a, 0xa3, 0x30, 0x0a, 0x12, 0x24, 0x8c, 0xc2, 0x28, 0xac, 0xd7, 0xeb,
    0xf0, 0xe3, 0xfb, 0xcf, 0x30, 0x1e, 0x8f, 0xc3, 0x60, 0x90, 0x85, 0x24,
    0x49, 0x42, 0x36, 0xc8, 0x42, 0xbf, 0xda, 0x56, 0xdc, 0xdd, 0xdd, 0x9c,
    0x75, 0xf7, 0x30, 0x52, 0x52, 0x2e, 0x99, 0x92, 0x23, 0xcc, 0x98, 0x31,
    0x1e, 0x8f, 0x49, 0x64, 0x48, 0x69, 0x05, 0xcf, 0xbf, 0x5e, 0xa8, 0xaa,
    0x8a, 0x74, 0x90, 0xd2, 0x37, 0xc0, 0xfb, 0x22, 0xce, 0xa3, 0x19, 0x88,
    0x10, 0x6b, 0x48, 0xed, 0x36, 0x38, 0x5c, 0x54, 0xdc, 0x14, 0xc4, 0xf1,
    0x60, 0xdf, 0xb9, 0xc1, 0x33, 0xb4, 0x21, 0x7f, 0xd8, 0x80, 0x19, 0xe9,
    0x70, 0x18, 0xd7, 0x6b, 0x77, 0xfa, 0x65, 0x51, 0xe0, 0x45, 0xa2, 0x9e,
    0x66, 0xb4, 0xbe, 0x39, 0x88, 0x2e, 0xd6, 0x9d, 0x38, 0x03, 0x15, 0x20,
    0xe6, 0x04, 0xf0, 0xb6, 0xc5, 0x88, 0x67, 0x88, 0xdf, 0x6c, 0x5a, 0x4f,
    0x1c, 0xf5, 0xb8, 0x35, 0x09, 0x6b, 0x00, 0xb1, 0x76, 0x28, 0x14, 0x8b,
    0x35, 0x74, 0x6f, 0x67, 0x3b, 0x39, 0xd2, 0x78, 0xda, 0x09, 0x45, 0xe9,
    0x23, 0x60, 0x65, 0xe7, 0x05, 0xad, 0xc9, 0x76, 0x37, 0x1a, 0x20, 0x0a,
    0x76, 0xb8, 0xe2, 0x30, 0x2b, 0xa9, 0xfb, 0x6c, 0x7a, 0x63, 0x32, 0x99,
    0xf2, 0x0d, 0xeb, 0xb0, 0x6c, 0xc9, 0x6a, 0x7c, 0xb4, 0xfa, 0xba, 0x07,
    0xea, 0x9a, 0x6d, 0x35, 0x68, 0x0d, 0x58, 0xcb, 0x39, 0x18, 0x0c, 0x58,
    0x2c, 0xee, 0x22, 0x63, 0xef, 0x7d, 0x63, 0x15, 0x88, 0x41, 0x25, 0x40,
    0x15, 0x9d, 0x33, 0x8b, 0x30, 0xd2, 0xb0, 0xb2, 0x1d, 0x18, 0x3b, 0xcd,
    0x31, 0x43, 0x04, 0x96, 0xcb, 0x25, 0xf3, 0xf9, 0xbc, 0xd7, 0xcf, 0xb2,
    0x8c, 0x8f, 0xb7, 0x0f, 0x7e, 0xbf, 0xbd, 0xa1, 0x6a, 0xc4, 0xf3, 0x47,
    0xd8, 0x1b, 0x3e, 0xe9, 0x3c, 0xcb, 0x0e, 0xb2, 0xed, 0xb3, 0x9e, 0xa6,
    0xe5, 0x72, 0xc9, 0xe3, 0xe3, 0x63, 0x0f, 0x3a, 0x87, 0xd0, 0x6a, 0xb5,
    0x0a, 0xab, 0xd5, 0x1b, 0xdb, 0xfa, 0xff, 0xa5, 0x68, 0x6d, 0xca, 0xce,
    0x99, 0xdd, 0x5f, 0x03, 0x54, 0xcb, 0x78, 0x5f, 0x19, 0x93, 0xe9, 0x84,
    0xdb, 0xdb, 0x5b, 0xee, 0xef, 0xef, 0x5b, 0xbc, 0xbf, 0xd1, 0xf6, 0x9e,
    0x0c, 0x3f, 0xec, 0x24, 0x86, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image4_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0x73, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xed, 0x92, 0xc1, 0x0e, 0x80,
    0x20, 0x08, 0x40, 0xb1, 0xef, 0x66, 0x1d, 0x1c, 0xff, 0x4d, 0x87, 0x6a,
    0xa8, 0x88, 0xa1, 0x76, 0x69, 0xf9, 0x36, 0x0f, 0x28, 0x3e, 0xd8, 0x00,
    0x60, 0xf1, 0x59, 0x42, 0x5f, 0x3a, 0x71, 0xf5, 0x36, 0x02, 0xe0, 0x8e,
    0x99, 0x2b, 0x09, 0x88, 0x01, 0xd0, 0x28, 0x54, 0x17, 0x6a, 0xe4, 0x7f,
    0x21, 0xce, 0x1f, 0xb5, 0xb0, 0x5d, 0x38, 0xed, 0xdc, 0x90, 0x60, 0xd0,
    0xf1, 0x13, 0x79, 0x63, 0x5b, 0x3b, 0xc9, 0x2b, 0xd5, 0x18, 0xe2, 0x39,
    0xa9, 0x43, 0xec, 0x1d, 0x5a, 0xb7, 0x78, 0x5c, 0xee, 0x10, 0x7b, 0xe4,
    0xb2, 0x15, 0xaf, 0x40, 0x91, 0xf8, 0x94, 0xde, 0x47, 0x18, 0x1e, 0xce,
    0xa5, 0x9e, 0xde, 0x9e, 0xc5, 0x9f, 0x38, 0x00, 0x62, 0xac, 0x28, 0xb1,
    0xe3, 0xd7, 0x01, 0xd9, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
    0xae, 0x42, 0x60, 0x82
};

static const unsigned char image5_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0x74, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xed, 0x92, 0xc1, 0x0a, 0xc0,
    0x20, 0x08, 0x40, 0x6d, 0xdf, 0x2d, 0x3b, 0x84, 0xff, 0xed, 0x0e, 0xa3,
    0x58, 0x6a, 0x26, 0xd1, 0x65, 0xe0, 0x83, 0x0e, 0xa5, 0x3e, 0x85, 0x04,
    0x48, 0x7e, 0x4b, 0x91, 0x0f, 0x54, 0x89, 0xf1, 0x9e, 0xa5, 0xa3, 0xca,
    0x0f, 0x8a, 0x89, 0x63, 0x65, 0xb3, 0x06, 0xc4, 0x2d, 0xd6, 0x13, 0xc6,
    0x49, 0xbd, 0xc2, 0x59, 0x83, 0x16, 0x13, 0x62, 0x19, 0xf0, 0xf9, 0x36,
    0xc0, 0xa2, 0xef, 0x00, 0xd7, 0x5a, 0x62, 0x61, 0x4d, 0x3a, 0xb2, 0x29,
    0x96, 0xf2, 0xa3, 0x62, 0xff, 0xa3, 0x37, 0xc5, 0xeb, 0xed, 0xe9, 0x62,
    0xaa, 0xd1, 0xa2, 0xe8, 0x4a, 0xaa, 0xa2, 0xf7, 0x50, 0xdd, 0x12, 0x74,
    0x8c, 0x0f, 0xd0, 0xab, 0x93, 0x24, 0x67, 0x78, 0x00, 0x59, 0x6e, 0x28,
    0xb1, 0x74, 0x3f, 0x46, 0x86, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image6_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0x82, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xcd, 0xd3, 0x41, 0x12, 0x80,
    0x20, 0x08, 0x05, 0x50, 0xe8, 0xe0, 0x2e, 0xbc, 0x38, 0xad, 0x32, 0x73,
    0x50, 0x3e, 0x48, 0x53, 0x7f, 0xe3, 0xe4, 0x8c, 0x4f, 0x24, 0x25, 0xfa,
    0x28, 0xe2, 0x9c, 0x6f, 0x39, 0x92, 0x0b, 0xf9, 0x27, 0x6c, 0xb6, 0x01,
    0x85, 0x35, 0x88, 0x77, 0x61, 0x13, 0x88, 0xc2, 0x57, 0x64, 0x18, 0xcd,
    0xa0, 0x15, 0xf5, 0x20, 0xb4, 0xe6, 0xb5, 0x5b, 0xe1, 0x09, 0xdc, 0x06,
    0x22, 0xb8, 0xe2, 0x2a, 0xcf, 0x31, 0x05, 0x6e, 0x18, 0xdf, 0xdf, 0xf8,
    0x06, 0x06, 0xaa, 0x55, 0x1c, 0xc6, 0x35, 0x64, 0xc4, 0xdc, 0xf8, 0x0c,
    0xd0, 0x20, 0x1d, 0x57, 0x7a, 0x5c, 0x85, 0xa8, 0x84, 0x5f, 0xdc, 0x02,
    0x5e, 0xa5, 0x30, 0x7a, 0xfc, 0xcd, 0x07, 0xe2, 0x3a, 0x1d, 0xf2, 0x83,
    0xec, 0x2b, 0x37, 0xd9, 0xad, 0x5f, 0xb4, 0xdf, 0xef, 0xd4, 0x9c, 0xfb,
    0xf7, 0x2f, 0xac, 0x98, 0xc8, 0xcc, 0x89, 0x00, 0x00, 0x00, 0x00, 0x49,
    0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image7_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0xbf, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xd5, 0x93, 0x41, 0x0a, 0x83,
    0x30, 0x10, 0x45, 0xdf, 0x48, 0x8e, 0xe5, 0x1d, 0xbc, 0x8c, 0x3b, 0xa9,
    0x8b, 0xf4, 0x6a, 0x9e, 0xab, 0xd3, 0x85, 0x35, 0x0d, 0x26, 0x63, 0x62,
    0x44, 0x4a, 0x3f, 0x0c, 0x42, 0x66, 0xfc, 0xf3, 0xf8, 0x24, 0xf0, 0x6f,
    0x12, 0x40, 0x2b, 0x66, 0xda, 0x8c, 0x55, 0xf3, 0xde, 0x22, 0x12, 0xcf,
    0x9d, 0x92, 0xcb, 0x98, 0xc0, 0xba, 0x2d, 0x7c, 0x45, 0x44, 0xcf, 0x9a,
    0x07, 0x63, 0x8b, 0xba, 0xd5, 0x3c, 0x44, 0x91, 0x23, 0x5e, 0xcf, 0x7c,
    0xc1, 0x62, 0x36, 0x97, 0xa9, 0x25, 0x40, 0xc1, 0x1f, 0xf4, 0xfd, 0xa7,
    0x52, 0x75, 0x01, 0x5d, 0x24, 0xa9, 0x38, 0x9e, 0x7d, 0x6f, 0x53, 0xdf,
    0x4f, 0xe4, 0xcc, 0xab, 0x32, 0x3e, 0xea, 0x0f, 0x03, 0xc0, 0xc4, 0xb2,
    0xa0, 0x71, 0x2c, 0xe6, 0xad, 0xd8, 0x9b, 0x59, 0xb7, 0x66, 0x1c, 0x3b,
    0xe0, 0x95, 0x98, 0x5f, 0x26, 0x16, 0x79, 0xee, 0x4e, 0xbc, 0xc2, 0x2c,
    0x97, 0x88, 0x55, 0x1f, 0xe6, 0xa2, 0xcb, 0xc4, 0x96, 0x9a, 0x89, 0x4b,
    0xcb, 0x6f, 0x23, 0xee, 0x36, 0x1a, 0xab, 0x62, 0xe2, 0x52, 0xc5, 0x72,
    0x94, 0xdf, 0xbf, 0xb6, 0x10, 0xbb, 0xf2, 0xc8, 0x97, 0xb8, 0xa4, 0x6c,
    0xc6, 0x67, 0x7e, 0xaa, 0x51, 0x95, 0x71, 0xfa, 0x08, 0x7e, 0xa8, 0x37,
    0x62, 0xda, 0x9a, 0xba, 0xcb, 0x20, 0x23, 0x5f, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image8_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0xd5, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xc5, 0x95, 0x5d, 0x0a, 0x84,
    0x30, 0x0c, 0x84, 0x27, 0xe2, 0xa9, 0x0a, 0x9e, 0x6c, 0x8b, 0x0f, 0x4b,
    0x3d, 0xd9, 0x82, 0xd7, 0xca, 0x3e, 0x58, 0xd7, 0xfe, 0x4c, 0xd0, 0xba,
    0x5d, 0x76, 0x40, 0x02, 0x4d, 0xf2, 0x65, 0xda, 0x0a, 0x05, 0x7e, 0x24,
    0x39, 0xc9, 0xeb, 0x8d, 0x9e, 0xaa, 0x88, 0x41, 0xa0, 0xc9, 0xaa, 0xd8,
    0xc8, 0x2a, 0xb3, 0x2f, 0x9c, 0x42, 0x5b, 0xe1, 0xe3, 0x0e, 0x0d, 0xcf,
    0x00, 0xc0, 0x03, 0x08, 0xf0, 0xb3, 0xa7, 0xa0, 0x74, 0x10, 0xa9, 0xd7,
    0x14, 0x2e, 0x00, 0xb4, 0x2c, 0x5a, 0x5f, 0xab, 0x69, 0x6b, 0x97, 0x9b,
    0x1c, 0x83, 0x7f, 0xc0, 0xc3, 0x16, 0xb6, 0xe4, 0x16, 0x5b, 0x64, 0xf7,
    0x8d, 0x71, 0x63, 0x59, 0x91, 0x9b, 0xdc, 0x45, 0x70, 0xde, 0x47, 0xc0,
    0x47, 0x32, 0xdd, 0x5e, 0x5b, 0xcc, 0x35, 0xf0, 0xc9, 0x77, 0x62, 0xae,
    0x78, 0x79, 0x36, 0xdc, 0xcf, 0x75, 0x13, 0x57, 0x7e, 0x79, 0xf4, 0x8c,
    0x4b, 0x27, 0xaa, 0x0f, 0x13, 0x27, 0xb2, 0x40, 0xf5, 0x11, 0x7f, 0xcb,
    0xe3, 0x48, 0xaa, 0x33, 0xb6, 0xe0, 0x22, 0x4b, 0x05, 0x4d, 0x07, 0x46,
    0xb8, 0x02, 0x5e, 0x2e, 0x3b, 0x3e, 0x73, 0xcd, 0xe0, 0xdd, 0x1c, 0x97,
    0xf0, 0x2e, 0x8e, 0xd9, 0xd0, 0xaf, 0x1d, 0xb3, 0x81, 0x22, 0x4b, 0xdf,
    0x33, 0xee, 0xe6, 0x98, 0xa9, 0x34, 0xa0, 0xf6, 0x17, 0xb4, 0x55, 0x40,
    0xd0, 0x0b, 0xcf, 0x4c, 0xa0, 0x8f, 0xc0, 0xdf, 0xf4, 0x06, 0xe3, 0x25,
    0xc1, 0x98, 0x1b, 0xc4, 0x18, 0x76, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image9_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x02,
    0x5d, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xd5, 0x93, 0xa1, 0x72, 0xdb,
    0x40, 0x10, 0x86, 0x3f, 0x67, 0x0a, 0x56, 0xec, 0xc4, 0x22, 0x78, 0xd0,
    0x65, 0x36, 0x93, 0xa0, 0xc2, 0x1c, 0x68, 0xd6, 0xc2, 0xe6, 0x0d, 0xf2,
    0x1a, 0x81, 0x81, 0x11, 0x34, 0x94, 0x99, 0xc2, 0x54, 0xa8, 0x32, 0x9b,
    0x55, 0xf0, 0xe0, 0x89, 0xdd, 0xb1, 0x5b, 0xa6, 0x02, 0xb7, 0x9d, 0x66,
    0x92, 0xd6, 0x99, 0xb6, 0xd3, 0x99, 0xfe, 0xe8, 0x6e, 0x67, 0xe7, 0xdb,
    0x7f, 0x77, 0xef, 0xe0, 0x7f, 0xd3, 0xe2, 0xc7, 0x4b, 0xd7, 0x75, 0xb3,
    0x73, 0x0e, 0xef, 0x3d, 0x51, 0x15, 0x00, 0x23, 0x82, 0xb5, 0x16, 0x6b,
    0x2d, 0x57, 0x57, 0x57, 0x8b, 0x17, 0x29, 0xbf, 0x02, 0xb7, 0x6d, 0x3b,
    0x0f, 0x87, 0x03, 0xb9, 0x2d, 0x58, 0xae, 0xd7, 0x60, 0x04, 0x00, 0xef,
    0x1c, 0xe3, 0xc7, 0x03, 0x06, 0xa8, 0xaa, 0x8a, 0xeb, 0xeb, 0xeb, 0x57,
    0xc1, 0x17, 0xdf, 0xa0, 0x6d, 0xdb, 0x52, 0x5d, 0xd7, 0x54, 0xef, 0xb6,
    0x00, 0xa8, 0x2a, 0x49, 0x13, 0x8a, 0x12, 0x35, 0x32, 0xec, 0x3a, 0xc4,
    0x2b, 0x9b, 0xcd, 0xe6, 0x55, 0xce, 0x2f, 0xfa, 0xbe, 0x9f, 0x87, 0xc3,
    0x40, 0xfd, 0xe1, 0x3d, 0xcb, 0x4d, 0x8d, 0xaa, 0xa2, 0x4e, 0x48, 0xee,
    0x12, 0xc6, 0x82, 0x38, 0x08, 0xc1, 0x07, 0x96, 0x9b, 0x1a, 0x8a, 0x9c,
    0xe3, 0xf1, 0xf8, 0xaa, 0x51, 0x5c, 0x38, 0xe7, 0xc8, 0xad, 0xa5, 0xaa,
    0x6b, 0x00, 0xc4, 0x5f, 0x12, 0x9c, 0x67, 0xd2, 0x23, 0x93, 0x8c, 0x88,
    0xe6, 0xc8, 0x60, 0xd1, 0x18, 0xb1, 0xd5, 0x92, 0xd1, 0x39, 0xba, 0xae,
    0x9b, 0xcf, 0x83, 0xa7, 0x89, 0x65, 0xb5, 0x46, 0x51, 0x34, 0x80, 0x1b,
    0x1d, 0x2e, 0x1f, 0x49, 0x45, 0xc0, 0xe3, 0x50, 0x09, 0x64, 0x08, 0xea,
    0x15, 0x44, 0x90, 0xc2, 0xe0, 0xbd, 0x3f, 0xef, 0x58, 0x53, 0xc2, 0xe4,
    0x86, 0xa0, 0x01, 0x9f, 0x4d, 0x84, 0xf5, 0x84, 0x18, 0x41, 0x83, 0x62,
    0xb0, 0x40, 0x8e, 0x8b, 0x23, 0xc9, 0x24, 0x50, 0x10, 0x93, 0x31, 0x4d,
    0xd3, 0x59, 0xf0, 0x1b, 0x80, 0x98, 0x14, 0x11, 0x20, 0x25, 0x14, 0x40,
    0x15, 0xf1, 0x96, 0x4c, 0x0b, 0xbc, 0x1b, 0x48, 0x4b, 0x07, 0xe4, 0x68,
    0x88, 0x80, 0xc0, 0x29, 0xeb, 0xd7, 0x8e, 0x41, 0x41, 0xf5, 0xb4, 0x34,
    0xfd, 0x76, 0x86, 0x4c, 0x05, 0x3f, 0x1e, 0x08, 0x4b, 0x0f, 0x85, 0x80,
    0x26, 0x54, 0x40, 0x63, 0x40, 0x44, 0xce, 0x83, 0x8b, 0xbc, 0xc0, 0x39,
    0x87, 0xa6, 0x13, 0x50, 0xa3, 0xa2, 0x28, 0x5e, 0x1d, 0x5a, 0x44, 0x14,
    0xd0, 0x70, 0x8a, 0xa5, 0x98, 0x08, 0x21, 0x62, 0xad, 0x3d, 0x0f, 0xb6,
    0xd6, 0xe2, 0x87, 0xcf, 0xa4, 0x98, 0x50, 0x8d, 0x27, 0x40, 0x50, 0x44,
    0x73, 0x70, 0x42, 0x8c, 0x91, 0xaf, 0x8d, 0x10, 0xfd, 0x44, 0x81, 0x60,
    0x8c, 0x39, 0x0b, 0x5e, 0x00, 0xdc, 0xdd, 0xdd, 0xcd, 0x8e, 0x80, 0xa9,
    0xde, 0x42, 0x02, 0x48, 0xe8, 0x04, 0x84, 0x08, 0x56, 0xf0, 0x3e, 0x02,
    0x90, 0x7d, 0x72, 0x94, 0x65, 0xc9, 0xba, 0x5a, 0xe3, 0x46, 0x87, 0x31,
    0xe6, 0xa7, 0x9f, 0xe5, 0x02, 0x60, 0xb5, 0x5a, 0x61, 0x02, 0xc4, 0xee,
    0x40, 0xa6, 0x89, 0x4c, 0x33, 0xf2, 0xcb, 0x0c, 0xb1, 0x06, 0x51, 0x28,
    0x14, 0xf8, 0xf8, 0x99, 0xb2, 0x2c, 0xb9, 0xb9, 0xb9, 0x59, 0xb8, 0xd1,
    0xf1, 0xf8, 0xf8, 0x48, 0xd3, 0x34, 0xb4, 0x6d, 0xfb, 0xe2, 0x9b, 0xfe,
    0x5e, 0xad, 0xef, 0xfb, 0xf9, 0x78, 0x3c, 0x32, 0x3a, 0x87, 0x18, 0x81,
    0xec, 0xb4, 0x20, 0x0d, 0x11, 0x51, 0xa8, 0xeb, 0x9a, 0xed, 0x76, 0xbb,
    0x00, 0x18, 0x86, 0x61, 0xee, 0xba, 0x8e, 0xfd, 0x7e, 0x8f, 0x31, 0x86,
    0xed, 0x76, 0xcb, 0x6a, 0xb5, 0x7a, 0xe2, 0xfe, 0x59, 0x1b, 0x5d, 0xd7,
    0xcd, 0xde, 0x7b, 0x62, 0x8c, 0x88, 0x08, 0x79, 0x9e, 0x63, 0xad, 0xa5,
    0xaa, 0xaa, 0x67, 0xb9, 0xbb, 0xdd, 0x6e, 0x6e, 0x9a, 0x06, 0xef, 0x3d,
    0x75, 0x5d, 0x3f, 0x29, 0xfe, 0xc7, 0xea, 0xfb, 0x7e, 0xbe, 0xbd, 0xbd,
    0x9d, 0xad, 0xb5, 0x73, 0x59, 0x96, 0xf3, 0xfd, 0xfd, 0xfd, 0xfc, 0xa2,
    0xe3, 0xdf, 0xd5, 0xc3, 0xc3, 0xc3, 0xdc, 0x34, 0x0d, 0xd3, 0x34, 0xb1,
    0xd9, 0x6c, 0xfe, 0x1e, 0x18, 0x4e, 0x63, 0xdc, 0xef, 0xf7, 0xa4, 0x94,
    0xfe, 0x26, 0xf6, 0x1f, 0xe9, 0x0b, 0xbc, 0x4c, 0x5e, 0x59, 0xd6, 0x14,
    0xca, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
};


/*
 *  Constructs a MainWindow as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 *
 */
MainWindow::MainWindow( QWidget* parent, const char* name, WFlags fl )
    : QMainWindow( parent, name, fl )
{
    (void)statusBar();
    QImage img;
    img.loadFromData( image0_data, sizeof( image0_data ), "PNG" );
    image0 = img;
    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    img.loadFromData( image3_data, sizeof( image3_data ), "PNG" );
    image3 = img;
    img.loadFromData( image4_data, sizeof( image4_data ), "PNG" );
    image4 = img;
    img.loadFromData( image5_data, sizeof( image5_data ), "PNG" );
    image5 = img;
    img.loadFromData( image6_data, sizeof( image6_data ), "PNG" );
    image6 = img;
    img.loadFromData( image7_data, sizeof( image7_data ), "PNG" );
    image7 = img;
    img.loadFromData( image8_data, sizeof( image8_data ), "PNG" );
    image8 = img;
    img.loadFromData( image9_data, sizeof( image9_data ), "PNG" );
    image9 = img;
    if ( !name )
	setName( "MainWindow" );
    setMinimumSize( QSize( 21, 127 ) );
    setIcon( image0 );
    setCentralWidget( new QWidget( this, "qt_central_widget" ) );

    tabWidget2 = new QTabWidget( centralWidget(), "tabWidget2" );
    tabWidget2->setEnabled( TRUE );
    tabWidget2->setGeometry( QRect( 11, 11, 670, 630 ) );
    tabWidget2->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)0, 0, 0, tabWidget2->sizePolicy().hasHeightForWidth() ) );
    tabWidget2->setMinimumSize( QSize( 670, 630 ) );

    tab = new QWidget( tabWidget2, "tab" );

    groupSensors = new QGroupBox( tab, "groupSensors" );
    groupSensors->setEnabled( FALSE );
    groupSensors->setGeometry( QRect( 11, 430, 644, 150 ) );
    groupSensors->setMinimumSize( QSize( 0, 150 ) );
    groupSensors->setMaximumSize( QSize( 32767, 150 ) );
    groupSensors->setColumnLayout(0, Qt::Vertical );
    groupSensors->layout()->setSpacing( 6 );
    groupSensors->layout()->setMargin( 11 );
    groupSensorsLayout = new QGridLayout( groupSensors->layout() );
    groupSensorsLayout->setAlignment( Qt::AlignTop );

    sensorTable = new QTable( groupSensors, "sensorTable" );
    sensorTable->setNumRows( 0 );
    sensorTable->setNumCols( 0 );

    groupSensorsLayout->addWidget( sensorTable, 0, 1 );

    layout15 = new QVBoxLayout( 0, 0, 6, "layout15"); 

    comboSensor = new QComboBox( FALSE, groupSensors, "comboSensor" );
    comboSensor->setMinimumSize( QSize( 160, 0 ) );
    layout15->addWidget( comboSensor );

    insertSensorButton = new QPushButton( groupSensors, "insertSensorButton" );
    insertSensorButton->setMaximumSize( QSize( 32767, 25 ) );
    layout15->addWidget( insertSensorButton );

    removeSensorButton = new QPushButton( groupSensors, "removeSensorButton" );
    removeSensorButton->setMaximumSize( QSize( 32767, 25 ) );
    layout15->addWidget( removeSensorButton );

    groupSensorsLayout->addLayout( layout15, 0, 0 );

    groupDrivers = new QGroupBox( tab, "groupDrivers" );
    groupDrivers->setEnabled( FALSE );
    groupDrivers->setGeometry( QRect( 11, 271, 644, 150 ) );
    groupDrivers->setMinimumSize( QSize( 0, 150 ) );
    groupDrivers->setMaximumSize( QSize( 32767, 150 ) );
    groupDrivers->setColumnLayout(0, Qt::Vertical );
    groupDrivers->layout()->setSpacing( 6 );
    groupDrivers->layout()->setMargin( 11 );
    groupDriversLayout = new QGridLayout( groupDrivers->layout() );
    groupDriversLayout->setAlignment( Qt::AlignTop );

    driverTable = new QTable( groupDrivers, "driverTable" );
    driverTable->setNumRows( 0 );
    driverTable->setNumCols( 0 );

    groupDriversLayout->addWidget( driverTable, 0, 1 );

    layout10 = new QVBoxLayout( 0, 0, 6, "layout10"); 

    comboDriver = new QComboBox( FALSE, groupDrivers, "comboDriver" );
    comboDriver->setMinimumSize( QSize( 160, 0 ) );
    layout10->addWidget( comboDriver );

    insertDriverButton = new QPushButton( groupDrivers, "insertDriverButton" );
    insertDriverButton->setMaximumSize( QSize( 32767, 25 ) );
    layout10->addWidget( insertDriverButton );

    removeDriverButton = new QPushButton( groupDrivers, "removeDriverButton" );
    removeDriverButton->setMaximumSize( QSize( 32767, 25 ) );
    layout10->addWidget( removeDriverButton );

    routeButton = new QPushButton( groupDrivers, "routeButton" );
    routeButton->setMaximumSize( QSize( 32767, 25 ) );
    layout10->addWidget( routeButton );

    groupDriversLayout->addLayout( layout10, 0, 0 );

    groupGeneral = new QGroupBox( tab, "groupGeneral" );
    groupGeneral->setEnabled( FALSE );
    groupGeneral->setGeometry( QRect( 11, 12, 644, 250 ) );
    groupGeneral->setMinimumSize( QSize( 644, 250 ) );
    groupGeneral->setMaximumSize( QSize( 32767, 260 ) );

    textLabel5 = new QLabel( groupGeneral, "textLabel5" );
    textLabel5->setGeometry( QRect( 11, 25, 103, 19 ) );

    textLabel1 = new QLabel( groupGeneral, "textLabel1" );
    textLabel1->setGeometry( QRect( 11, 50, 103, 19 ) );

    pushButton14 = new QPushButton( groupGeneral, "pushButton14" );
    pushButton14->setGeometry( QRect( 120, 75, 133, 25 ) );
    pushButton14->setMaximumSize( QSize( 32767, 25 ) );

    seeButton = new QPushButton( groupGeneral, "seeButton" );
    seeButton->setGeometry( QRect( 259, 75, 80, 25 ) );
    seeButton->setMaximumSize( QSize( 32767, 25 ) );

    netChooseButton = new QPushButton( groupGeneral, "netChooseButton" );
    netChooseButton->setGeometry( QRect( 11, 75, 103, 25 ) );
    netChooseButton->setMaximumSize( QSize( 32767, 25 ) );

    fileNameLabel = new QLabel( groupGeneral, "fileNameLabel" );
    fileNameLabel->setGeometry( QRect( 50, 20, 513, 30 ) );
    QFont fileNameLabel_font(  fileNameLabel->font() );
    fileNameLabel_font.setBold( TRUE );
    fileNameLabel_font.setItalic( TRUE );
    fileNameLabel->setFont( fileNameLabel_font ); 

    netNameLabel = new QLabel( groupGeneral, "netNameLabel" );
    netNameLabel->setGeometry( QRect( 93, 50, 540, 20 ) );
    QFont netNameLabel_font(  netNameLabel->font() );
    netNameLabel_font.setBold( TRUE );
    netNameLabel_font.setItalic( TRUE );
    netNameLabel->setFont( netNameLabel_font ); 

    QWidget* privateLayoutWidget = new QWidget( groupGeneral, "layout9" );
    privateLayoutWidget->setGeometry( QRect( 11, 106, 622, 140 ) );
    layout9 = new QGridLayout( privateLayoutWidget, 1, 1, 11, 6, "layout9"); 

    lineSensorI = new QLineEdit( privateLayoutWidget, "lineSensorI" );

    layout9->addWidget( lineSensorI, 0, 3 );

    textLabel2_2_2 = new QLabel( privateLayoutWidget, "textLabel2_2_2" );

    layout9->addWidget( textLabel2_2_2, 2, 2 );

    lineSteps = new QLineEdit( privateLayoutWidget, "lineSteps" );
    lineSteps->setMaximumSize( QSize( 150, 32767 ) );

    layout9->addWidget( lineSteps, 0, 1 );

    textLabel4 = new QLabel( privateLayoutWidget, "textLabel4" );

    layout9->addWidget( textLabel4, 1, 0 );

    textLabel4_3 = new QLabel( privateLayoutWidget, "textLabel4_3" );

    layout9->addWidget( textLabel4_3, 3, 0 );

    lineIterationLength = new QLineEdit( privateLayoutWidget, "lineIterationLength" );
    lineIterationLength->setMaximumSize( QSize( 150, 32767 ) );

    layout9->addWidget( lineIterationLength, 3, 1 );

    lineCellSize = new QLineEdit( privateLayoutWidget, "lineCellSize" );
    lineCellSize->setMaximumSize( QSize( 150, 32767 ) );

    layout9->addWidget( lineCellSize, 2, 1 );

    textLabel3 = new QLabel( privateLayoutWidget, "textLabel3" );

    layout9->addWidget( textLabel3, 0, 0 );

    textLabel4_2 = new QLabel( privateLayoutWidget, "textLabel4_2" );

    layout9->addWidget( textLabel4_2, 2, 0 );

    lineMaxSpeed = new QLineEdit( privateLayoutWidget, "lineMaxSpeed" );

    layout9->addWidget( lineMaxSpeed, 2, 3 );

    lineDecel = new QLineEdit( privateLayoutWidget, "lineDecel" );
    lineDecel->setMaximumSize( QSize( 150, 32767 ) );

    layout9->addWidget( lineDecel, 1, 1 );

    lineAgentI = new QLineEdit( privateLayoutWidget, "lineAgentI" );

    layout9->addWidget( lineAgentI, 1, 3 );

    textLabel2_2 = new QLabel( privateLayoutWidget, "textLabel2_2" );

    layout9->addWidget( textLabel2_2, 1, 2 );

    textLabel1_4 = new QLabel( privateLayoutWidget, "textLabel1_4" );

    layout9->addWidget( textLabel1_4, 0, 2 );
    tabWidget2->insertTab( tab, QString::fromLatin1("") );

    tab_2 = new QWidget( tabWidget2, "tab_2" );
    tabLayout = new QGridLayout( tab_2, 1, 1, 11, 6, "tabLayout"); 
    spacer12 = new QSpacerItem( 31, 50, QSizePolicy::Minimum, QSizePolicy::Expanding );
    tabLayout->addItem( spacer12, 2, 0 );

    layout13 = new QHBoxLayout( 0, 0, 6, "layout13"); 
    spacer11 = new QSpacerItem( 111, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    layout13->addItem( spacer11 );

    buttonAddTemplate = new QPushButton( tab_2, "buttonAddTemplate" );
    buttonAddTemplate->setEnabled( TRUE );
    layout13->addWidget( buttonAddTemplate );

    buttonRemoveTemplate = new QPushButton( tab_2, "buttonRemoveTemplate" );
    buttonRemoveTemplate->setEnabled( TRUE );
    layout13->addWidget( buttonRemoveTemplate );

    tabLayout->addMultiCellLayout( layout13, 1, 1, 0, 1 );

    layout10_2 = new QHBoxLayout( 0, 0, 6, "layout10_2"); 

    listDrivers = new QListView( tab_2, "listDrivers" );
    listDrivers->addColumn( tr( "Driver Name" ) );
    listDrivers->setMinimumSize( QSize( 0, 340 ) );
    listDrivers->setMaximumSize( QSize( 110, 32767 ) );
    layout10_2->addWidget( listDrivers );

    layout9_2 = new QVBoxLayout( 0, 0, 6, "layout9_2"); 

    textLabel1_2 = new QLabel( tab_2, "textLabel1_2" );
    layout9_2->addWidget( textLabel1_2 );

    templateTable = new QTable( tab_2, "templateTable" );
    templateTable->setMinimumSize( QSize( 480, 250 ) );
    templateTable->setMaximumSize( QSize( 32767, 32767 ) );
    templateTable->setNumRows( 0 );
    templateTable->setNumCols( 0 );
    templateTable->setSelectionMode( QTable::SingleRow );
    layout9_2->addWidget( templateTable );

    textLabel2 = new QLabel( tab_2, "textLabel2" );
    layout9_2->addWidget( textLabel2 );

    textDescription = new QTextEdit( tab_2, "textDescription" );
    layout9_2->addWidget( textDescription );
    layout10_2->addLayout( layout9_2 );

    tabLayout->addLayout( layout10_2, 0, 0 );
    tabWidget2->insertTab( tab_2, QString::fromLatin1("") );

    TabPage = new QWidget( tabWidget2, "TabPage" );

    pushButton17 = new QPushButton( TabPage, "pushButton17" );
    pushButton17->setGeometry( QRect( 10, 560, 254, 29 ) );

    pushButton18 = new QPushButton( TabPage, "pushButton18" );
    pushButton18->setGeometry( QRect( 270, 560, 80, 29 ) );

    pushButton11 = new QPushButton( TabPage, "pushButton11" );
    pushButton11->setGeometry( QRect( 410, 40, 200, 29 ) );

    lineEdit3 = new QLineEdit( TabPage, "lineEdit3" );
    lineEdit3->setGeometry( QRect( 10, 40, 390, 26 ) );
    lineEdit3->setReadOnly( TRUE );

    textLabel1_3 = new QLabel( TabPage, "textLabel1_3" );
    textLabel1_3->setGeometry( QRect( 10, 10, 254, 21 ) );

    groupBox4 = new QGroupBox( TabPage, "groupBox4" );
    groupBox4->setGeometry( QRect( 10, 80, 600, 455 ) );

    pushButton16 = new QPushButton( groupBox4, "pushButton16" );
    pushButton16->setGeometry( QRect( 300, 30, 196, 25 ) );
    pushButton16->setMaximumSize( QSize( 32767, 25 ) );

    pushButton15 = new QPushButton( groupBox4, "pushButton15" );
    pushButton15->setGeometry( QRect( 100, 30, 196, 25 ) );
    pushButton15->setMaximumSize( QSize( 32767, 25 ) );

    listAgents = new QListBox( groupBox4, "listAgents" );
    listAgents->setEnabled( TRUE );
    listAgents->setGeometry( QRect( 10, 60, 150, 380 ) );

    table7 = new QTable( groupBox4, "table7" );
    table7->setNumCols( table7->numCols() + 1 );
    table7->horizontalHeader()->setLabel( table7->numCols() - 1, tr( "Upstream" ) );
    table7->setNumCols( table7->numCols() + 1 );
    table7->horizontalHeader()->setLabel( table7->numCols() - 1, tr( "Downstream" ) );
    table7->setNumCols( table7->numCols() + 1 );
    table7->horizontalHeader()->setLabel( table7->numCols() - 1, tr( "Tau" ) );
    table7->setGeometry( QRect( 170, 320, 420, 120 ) );
    table7->setMargin( 0 );
    table7->setMidLineWidth( 0 );
    table7->setNumRows( 4 );
    table7->setNumCols( 3 );

    table6 = new QTable( groupBox4, "table6" );
    table6->setNumCols( table6->numCols() + 1 );
    table6->horizontalHeader()->setLabel( table6->numCols() - 1, tr( "Gamma" ) );
    table6->setNumRows( table6->numRows() + 1 );
    table6->verticalHeader()->setLabel( table6->numRows() - 1, tr( "Synchronized " ) );
    table6->setNumRows( table6->numRows() + 1 );
    table6->verticalHeader()->setLabel( table6->numRows() - 1, tr( "Unsynchronized " ) );
    table6->setGeometry( QRect( 170, 240, 255, 70 ) );
    table6->setNumRows( 2 );
    table6->setNumCols( 1 );
    table6->setShowGrid( TRUE );

    table4 = new QTable( groupBox4, "table4" );
    table4->setEnabled( TRUE );
    table4->setGeometry( QRect( 170, 60, 420, 380 ) );
    table4->setMaximumSize( QSize( 32767, 32767 ) );
    table4->setNumRows( 0 );
    table4->setNumCols( 0 );
    table4->setSelectionMode( QTable::SingleRow );
    tabWidget2->insertTab( TabPage, QString::fromLatin1("") );

    TabPage_2 = new QWidget( tabWidget2, "TabPage_2" );
    TabPageLayout = new QGridLayout( TabPage_2, 1, 1, 11, 6, "TabPageLayout"); 

    pushButton13 = new QPushButton( TabPage_2, "pushButton13" );
    pushButton13->setMaximumSize( QSize( 300, 32767 ) );

    TabPageLayout->addWidget( pushButton13, 0, 0 );

    pushButton12 = new QPushButton( TabPage_2, "pushButton12" );

    TabPageLayout->addWidget( pushButton12, 1, 0 );
    tabWidget2->insertTab( TabPage_2, QString::fromLatin1("") );

    // actions
    fileOpenAction = new QAction( this, "fileOpenAction" );
    fileOpenAction->setIconSet( QIconSet( image1 ) );
    fileSaveAction = new QAction( this, "fileSaveAction" );
    fileSaveAction->setIconSet( QIconSet( image2 ) );
    fileSaveAsAction = new QAction( this, "fileSaveAsAction" );
    filePrintAction = new QAction( this, "filePrintAction" );
    filePrintAction->setIconSet( QIconSet( image3 ) );
    fileExitAction = new QAction( this, "fileExitAction" );
    editUndoAction = new QAction( this, "editUndoAction" );
    editUndoAction->setIconSet( QIconSet( image4 ) );
    editRedoAction = new QAction( this, "editRedoAction" );
    editRedoAction->setIconSet( QIconSet( image5 ) );
    editCutAction = new QAction( this, "editCutAction" );
    editCutAction->setIconSet( QIconSet( image6 ) );
    editCopyAction = new QAction( this, "editCopyAction" );
    editCopyAction->setIconSet( QIconSet( image7 ) );
    editPasteAction = new QAction( this, "editPasteAction" );
    editPasteAction->setIconSet( QIconSet( image8 ) );
    editFindAction = new QAction( this, "editFindAction" );
    editFindAction->setIconSet( QIconSet( image9 ) );
    helpContentsAction = new QAction( this, "helpContentsAction" );
    helpIndexAction = new QAction( this, "helpIndexAction" );
    helpAboutAction = new QAction( this, "helpAboutAction" );
    editxxxAction = new QAction( this, "editxxxAction" );
    edityyyAction = new QAction( this, "edityyyAction" );
    fileCloseAction = new QAction( this, "fileCloseAction" );
    Action = new QAction( this, "Action" );


    // toolbars


    // menubar
    MenuBar = new QMenuBar( this, "MenuBar" );


    File = new QPopupMenu( this );
    fileOpenAction->addTo( File );
    fileSaveAction->addTo( File );
    fileSaveAsAction->addTo( File );
    fileCloseAction->addTo( File );
    File->insertSeparator();
    fileExitAction->addTo( File );
    MenuBar->insertItem( QString(""), File, 1 );

    Help = new QPopupMenu( this );
    helpContentsAction->addTo( Help );
    helpAboutAction->addTo( Help );
    MenuBar->insertItem( QString(""), Help, 2 );

    languageChange();
    resize( QSize(700, 700).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // signals and slots connections
    connect( fileOpenAction, SIGNAL( activated() ), this, SLOT( fileOpen_() ) );
    connect( fileSaveAction, SIGNAL( activated() ), this, SLOT( fileSave_() ) );
    connect( fileSaveAsAction, SIGNAL( activated() ), this, SLOT( fileSaveAs_() ) );
    connect( fileExitAction, SIGNAL( activated() ), this, SLOT( close() ) );
    connect( helpContentsAction, SIGNAL( activated() ), this, SLOT( helpContents() ) );
    connect( helpAboutAction, SIGNAL( activated() ), this, SLOT( helpAbout() ) );
    connect( fileCloseAction, SIGNAL( activated() ), this, SLOT( fileClose() ) );
    connect( listDrivers, SIGNAL( clicked(QListViewItem*) ), this, SLOT( showTemplateStructure_(QListViewItem*) ) );
    connect( insertDriverButton, SIGNAL( clicked() ), this, SLOT( insertDriver_() ) );
    connect( insertSensorButton, SIGNAL( clicked() ), this, SLOT( insertSensor_() ) );
    connect( removeDriverButton, SIGNAL( clicked() ), this, SLOT( removeDriver_() ) );
    connect( removeSensorButton, SIGNAL( clicked() ), this, SLOT( removeSensor_() ) );
    connect( comboDriver, SIGNAL( activated(const QString&) ), this, SLOT( driverSelected_(const QString&) ) );
    connect( comboSensor, SIGNAL( activated(const QString&) ), this, SLOT( sensorSelected_(const QString&) ) );
    connect( driverTable, SIGNAL( valueChanged(int,int) ), this, SLOT( driverChanged_(int,int) ) );
    connect( sensorTable, SIGNAL( valueChanged(int,int) ), this, SLOT( sensorChanged_(int,int) ) );
    connect( driverTable, SIGNAL( clicked(int,int,int,const QPoint&) ), this, SLOT( tableDriverClicked_(int,int) ) );
    connect( sensorTable, SIGNAL( clicked(int,int,int,const QPoint&) ), this, SLOT( tableSensorClicked_(int,int) ) );
    connect( templateTable, SIGNAL( clicked(int,int,int,const QPoint&) ), this, SLOT( tableTemplateClicked_(int,int,int,const QPoint&) ) );
    connect( templateTable, SIGNAL( valueChanged(int,int) ), this, SLOT( templateChanged_(int,int) ) );
    connect( textDescription, SIGNAL( textChanged() ), this, SLOT( descriptionChanged_() ) );
    connect( netChooseButton, SIGNAL( clicked() ), this, SLOT( chooseNet_() ) );
    connect( seeButton, SIGNAL( clicked() ), this, SLOT( seeNet_() ) );
    connect( routeButton, SIGNAL( clicked() ), this, SLOT( configRoute_() ) );
    connect( buttonAddTemplate, SIGNAL( clicked() ), this, SLOT( newTemplate_() ) );
    connect( buttonRemoveTemplate, SIGNAL( clicked() ), this, SLOT( removeTemplate_() ) );
    connect( pushButton14, SIGNAL( clicked() ), this, SLOT( createNewNet_() ) );
    connect( pushButton11, SIGNAL( clicked() ), this, SLOT( chooseAgentsFile_() ) );
    connect( pushButton13, SIGNAL( clicked() ), this, SLOT( runSimulation_() ) );
    connect( pushButton12, SIGNAL( clicked() ), this, SLOT( viewSimulation_() ) );
    connect( pushButton15, SIGNAL( clicked() ), this, SLOT( addAgent_() ) );
    connect( pushButton16, SIGNAL( clicked() ), this, SLOT( removeAgent_() ) );
    connect( pushButton17, SIGNAL( clicked() ), this, SLOT( saveAgents_() ) );
    connect( pushButton18, SIGNAL( clicked() ), this, SLOT( saveAsAgents_() ) );
    connect( table4, SIGNAL( clicked(int,int,int,const QPoint&) ), this, SLOT( tableAgentsClicked_(int,int,int,const QPoint&) ) );
    connect( listAgents, SIGNAL( selectionChanged(QListBoxItem*) ), this, SLOT( listAgentsSelectionChanged_(QListBoxItem*) ) );
    connect( table4, SIGNAL( valueChanged(int,int) ), this, SLOT( agentChanged_(int,int) ) );
    connect( table6, SIGNAL( valueChanged(int,int) ), this, SLOT( gammaChanged_(int,int) ) );
    connect( table7, SIGNAL( valueChanged(int,int) ), this, SLOT( tauChanged_(int,int) ) );
}

/*
 *  Destroys the object and frees any allocated resources
 */
MainWindow::~MainWindow()
{
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void MainWindow::languageChange()
{
    setCaption( tr( " ITSUMO " ) );
    groupSensors->setTitle( tr( "Sensors" ) );
    insertSensorButton->setText( tr( "Insert Sensor" ) );
    removeSensorButton->setText( tr( "Remove Sensor" ) );
    groupDrivers->setTitle( tr( "Drivers" ) );
    insertDriverButton->setText( tr( "Insert Driver" ) );
    removeDriverButton->setText( tr( "Remove Driver" ) );
    routeButton->setText( tr( "Route" ) );
    groupGeneral->setTitle( tr( "General" ) );
    textLabel5->setText( tr( "File:" ) );
    textLabel1->setText( tr( "Network:" ) );
    pushButton14->setText( tr( "Edit/Create Net" ) );
    seeButton->setText( tr( "See Net" ) );
    netChooseButton->setText( tr( "Choose Net" ) );
    fileNameLabel->setText( QString::null );
    netNameLabel->setText( QString::null );
    textLabel2_2_2->setText( tr( "Car Max Speed:" ) );
    textLabel4->setText( tr( "Default deceleration:" ) );
    textLabel4_3->setText( tr( "Iteration Length:" ) );
    textLabel3->setText( tr( "Steps:" ) );
    textLabel4_2->setText( tr( "Cell Size:" ) );
    textLabel2_2->setText( tr( "Agent Interval:" ) );
    textLabel1_4->setText( tr( "Sensor Interval:" ) );
    tabWidget2->changeTab( tab, tr( "Configuration" ) );
    buttonAddTemplate->setText( tr( "New Model" ) );
    buttonRemoveTemplate->setText( tr( "Delete Model" ) );
    listDrivers->header()->setLabel( 0, tr( "Driver Name" ) );
    textLabel1_2->setText( tr( "Properties:" ) );
    QToolTip::add( templateTable, QString::null );
    textLabel2->setText( tr( "Description:" ) );
    tabWidget2->changeTab( tab_2, tr( "Driver Configuration" ) );
    pushButton17->setText( tr( "Save" ) );
    pushButton18->setText( tr( "Save As" ) );
    pushButton11->setText( tr( "Select configuration file" ) );
    textLabel1_3->setText( tr( "Definition of traffic light agents." ) );
    groupBox4->setTitle( tr( "Agents" ) );
    pushButton16->setText( tr( "Remove" ) );
    pushButton15->setText( tr( "Add" ) );
    table7->horizontalHeader()->setLabel( 0, tr( "Upstream" ) );
    table7->horizontalHeader()->setLabel( 1, tr( "Downstream" ) );
    table7->horizontalHeader()->setLabel( 2, tr( "Tau" ) );
    table6->horizontalHeader()->setLabel( 0, tr( "Gamma" ) );
    table6->verticalHeader()->setLabel( 0, tr( "Synchronized " ) );
    table6->verticalHeader()->setLabel( 1, tr( "Unsynchronized " ) );
    tabWidget2->changeTab( TabPage, tr( "Traffic Light Agents" ) );
    pushButton13->setText( tr( "Simulate !" ) );
    pushButton12->setText( tr( "3D visualization !" ) );
    tabWidget2->changeTab( TabPage_2, tr( "Simulation" ) );
    fileOpenAction->setText( tr( "Open" ) );
    fileOpenAction->setMenuText( tr( "&Open..." ) );
    fileOpenAction->setAccel( tr( "Ctrl+O" ) );
    fileSaveAction->setText( tr( "Save" ) );
    fileSaveAction->setMenuText( tr( "&Save" ) );
    fileSaveAction->setAccel( tr( "Ctrl+S" ) );
    fileSaveAsAction->setText( tr( "Save &As..." ) );
    fileSaveAsAction->setMenuText( tr( "Save &As..." ) );
    fileSaveAsAction->setAccel( QString::null );
    filePrintAction->setText( tr( "Print" ) );
    filePrintAction->setMenuText( tr( "&Print..." ) );
    filePrintAction->setAccel( tr( "Ctrl+P" ) );
    fileExitAction->setText( tr( "Exit" ) );
    fileExitAction->setMenuText( tr( "E&xit" ) );
    fileExitAction->setAccel( QString::null );
    editUndoAction->setText( tr( "Undo" ) );
    editUndoAction->setMenuText( tr( "&Undo" ) );
    editUndoAction->setAccel( tr( "Ctrl+Z" ) );
    editRedoAction->setText( tr( "Redo" ) );
    editRedoAction->setMenuText( tr( "&Redo" ) );
    editRedoAction->setAccel( tr( "Ctrl+Y" ) );
    editCutAction->setText( tr( "xxx" ) );
    editCutAction->setMenuText( tr( "xxx" ) );
    editCutAction->setAccel( tr( "Ctrl+X" ) );
    editCopyAction->setText( tr( "yyy" ) );
    editCopyAction->setMenuText( tr( "yyy" ) );
    editCopyAction->setAccel( tr( "Ctrl+C" ) );
    editPasteAction->setText( tr( "zzz" ) );
    editPasteAction->setMenuText( tr( "zzz" ) );
    editPasteAction->setAccel( tr( "Ctrl+V" ) );
    editFindAction->setText( tr( "Find" ) );
    editFindAction->setMenuText( tr( "&Find..." ) );
    editFindAction->setAccel( tr( "Ctrl+F" ) );
    helpContentsAction->setText( tr( "Contents" ) );
    helpContentsAction->setMenuText( tr( "&Contents..." ) );
    helpContentsAction->setAccel( QString::null );
    helpIndexAction->setText( tr( "Index" ) );
    helpIndexAction->setMenuText( tr( "&Index..." ) );
    helpIndexAction->setAccel( QString::null );
    helpAboutAction->setText( tr( "About" ) );
    helpAboutAction->setMenuText( tr( "&About" ) );
    helpAboutAction->setAccel( QString::null );
    editxxxAction->setText( tr( "xxx" ) );
    editxxxAction->setMenuText( tr( "xxx" ) );
    edityyyAction->setText( tr( "yyy" ) );
    edityyyAction->setMenuText( tr( "yyy" ) );
    fileCloseAction->setText( tr( "Close" ) );
    fileCloseAction->setMenuText( tr( "Close" ) );
    Action->setText( tr( "Action" ) );
    if (MenuBar->findItem(1))
        MenuBar->findItem(1)->setText( tr( "&File" ) );
    if (MenuBar->findItem(2))
        MenuBar->findItem(2)->setText( tr( "&Help" ) );
}

